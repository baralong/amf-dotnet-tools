// Template: Base Controller (ApiControllerBase.t4) version 3.0

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Web.Http;
using System.Web.Http.Description;
using MoviesWebApiSample.MoviesV1.Models;

// Do not modify this file. This code was generated by AMF Server Scaffolder

namespace MoviesWebApiSample.MoviesV1
{
    [RoutePrefix("movies")]
    public partial class MoviesController : ApiController
    {


/// <summary>
		/// gets all movies in the catalogue - /movies
		/// </summary>
		/// <returns>IList&lt;Movie&gt;</returns>
        [ResponseType(typeof(IList<Movie>))]
        [HttpGet]
        [Route("movies")]
        public virtual IHttpActionResult GetBase()
        {
            // Do not modify this code
                        return  ((IMoviesController)this).Get();
                    }

/// <summary>
		/// adds a movie to the catalogue - /movies
		/// </summary>
		/// <param name="iListMovie"></param>
		/// <param name="access_token">Used to send a valid OAuth 2 access token. Do not use together with the &quot;Authorization&quot; header </param>
        [HttpPost]
        [Route("movies")]
        public virtual IHttpActionResult PostBase([FromBody] IList<Movie> iListMovie,[FromUri] string access_token)
        {
            // Do not modify this code
                        return  ((IMoviesController)this).Post(iListMovie,access_token);
                    }

/// <summary>
		/// get the info of a movie - /movies/{id}
		/// </summary>
		/// <param name="id"></param>
		/// <returns>Movie</returns>
        [ResponseType(typeof(Movie))]
        [HttpGet]
        [Route("{id}")]
        public virtual IHttpActionResult GetByIdBase([FromUri] string id)
        {
            // Do not modify this code
                        return  ((IMoviesController)this).GetById(id);
                    }

/// <summary>
		/// update the info of a movie - /movies/{id}
		/// </summary>
		/// <param name="movie"></param>
		/// <param name="id"></param>
        [HttpPut]
        [Route("{id}")]
        public virtual IHttpActionResult PutBase(Models.Movie movie,[FromUri] string id)
        {
            // Do not modify this code
                        return  ((IMoviesController)this).Put(movie,id);
                    }

/// <summary>
		/// remove a movie from the catalogue - /movies/{id}
		/// </summary>
		/// <param name="id"></param>
        [HttpDelete]
        [Route("{id}")]
        public virtual IHttpActionResult DeleteBase([FromUri] string id)
        {
            // Do not modify this code
                        return  ((IMoviesController)this).Delete(id);
                    }

/// <summary>
		/// rent a movie - /movies/{id}/rent
		/// </summary>
		/// <param name="content"></param>
		/// <param name="id"></param>
		/// <param name="access_token">Used to send a valid OAuth 2 access token. Do not use together with the &quot;Authorization&quot; header </param>
        [HttpPut]
        [Route("{id}/rent")]
        public virtual IHttpActionResult PutByIdRentBase([FromBody] string content,[FromUri] string id,[FromUri] string access_token)
        {
            // Do not modify this code
                        return  ((IMoviesController)this).PutByIdRent(content,id,access_token);
                    }

/// <summary>
		/// return a movie - /movies/{id}/return
		/// </summary>
		/// <param name="content"></param>
		/// <param name="id"></param>
		/// <param name="access_token">Used to send a valid OAuth 2 access token. Do not use together with the &quot;Authorization&quot; header </param>
        [HttpPut]
        [Route("{id}/return")]
        public virtual IHttpActionResult PutByIdReturnBase([FromBody] string content,[FromUri] string id,[FromUri] string access_token)
        {
            // Do not modify this code
                        return  ((IMoviesController)this).PutByIdReturn(content,id,access_token);
                    }

/// <summary>
		/// gets the current user movies wishlist - /movies/wishlist
		/// </summary>
		/// <param name="access_token">Used to send a valid OAuth 2 access token. Do not use together with the &quot;Authorization&quot; header </param>
		/// <returns>IList&lt;Movie&gt;</returns>
        [ResponseType(typeof(IList<Movie>))]
        [HttpGet]
        [Route("wishlist")]
        public virtual IHttpActionResult GetWishlistBase([FromUri] string access_token)
        {
            // Do not modify this code
                        return  ((IMoviesController)this).GetWishlist(access_token);
                    }

/// <summary>
		/// add a movie to the current user movies wishlist - /movies/wishlist/{id}
		/// </summary>
		/// <param name="content"></param>
		/// <param name="id"></param>
		/// <param name="access_token">Used to send a valid OAuth 2 access token. Do not use together with the &quot;Authorization&quot; header </param>
        [HttpPost]
        [Route("wishlist/{id}")]
        public virtual IHttpActionResult PostWishlistByIdBase([FromBody] string content,[FromUri] string id,[FromUri] string access_token)
        {
            // Do not modify this code
                        return  ((IMoviesController)this).PostWishlistById(content,id,access_token);
                    }

/// <summary>
		/// removes a movie from the current user movies wishlist - /movies/wishlist/{id}
		/// </summary>
		/// <param name="id"></param>
		/// <param name="access_token">Used to send a valid OAuth 2 access token. Do not use together with the &quot;Authorization&quot; header </param>
        [HttpDelete]
        [Route("wishlist/{id}")]
        public virtual IHttpActionResult DeleteWishlistByIdBase([FromUri] string id,[FromUri] string access_token)
        {
            // Do not modify this code
                        return  ((IMoviesController)this).DeleteWishlistById(id,access_token);
                    }

/// <summary>
		/// gets the user rented movies - /movies/rented
		/// </summary>
		/// <returns>IList&lt;Movie&gt;</returns>
        [ResponseType(typeof(IList<Movie>))]
        [HttpGet]
        [Route("rented")]
        public virtual IHttpActionResult GetRentedBase()
        {
            // Do not modify this code
                        return  ((IMoviesController)this).GetRented();
                    }

/// <summary>
		/// get all movies that are not currently rented - /movies/available
		/// </summary>
		/// <returns>IList&lt;Movie&gt;</returns>
        [ResponseType(typeof(IList<Movie>))]
        [HttpGet]
        [Route("available")]
        public virtual IHttpActionResult GetAvailableBase()
        {
            // Do not modify this code
                        return  ((IMoviesController)this).GetAvailable();
                    }
    }
}
